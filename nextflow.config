/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                             MSTinn Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                 Default config options for all compute environments
-----------------------------------------------------------------------------------------------------------------------------------------------------
*/

params {

    help                                                    = false
    email                                                   = null
    input                                                   = null
    outdir                                                  = null
    aligner                                                 = 'bwa-meth'  // Options are: 'bwa-meth', 'bwa-mem2' & "sentieon" for <Sentieon<bwa-mem>"
    version                                                 = false
    hook_url                                                = null
    refs_dir                                                = null
    help_full                                               = false
    seq_center                                              = "MSKCC_IGO"
    rastair_not                                             = '0,0,0,0'
    rastair_nob                                             = '0,0,0,0'    
    seq_library                                             = "Av2"
    read_length                                             = 150
    show_hidden                                             = false
    multiqc_logo                                            = "${projectDir}/assets/MSTinn_logo_light.png"
    seq_platform                                            = "ILLUMINA"
    skip_multiqc                                            = false
    email_on_fail                                           = null
    multiqc_title                                           = null
    multiqc_config                                          = null
    save_reference                                          = false
    igenomes_ignore                                         = true
    monochrome_logs                                         = false
    plaintext_email                                         = false
    validate_params                                         = true
    publish_dir_mode                                        = 'copy'
    run_downsamplings                                       = false
    run_umiprocessing                                       = false
    pymbias_plot_type                                       = 'pdf'
    pymbias_plot_ax_x                                       = 1200
    pymbias_plot_ax_y                                       = 800
    custom_config_base                                      = "https://raw.githubusercontent.com/nf-core/configs/master"
    config_profile_url                                      = null
    config_profile_name                                     = null
    trace_report_suffix                                     = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')// Config options
    config_profile_contact                                  = null
    max_multiqc_email_size                                  = '25.MB'
    downsampling_total_reads                                = null
    config_profile_description                              = null
    multiqc_methods_description                             = null
    pipelines_testdata_base_path                            = 'https://raw.githubusercontent.com/nf-core/test-datasets/'

    // Methylation options
    rastair_not                                             = '0,0,0,0'
    rastair_nob                                             = '0,0,0,0'
    pymbias_plot_type                                       = 'pdf'
    pymbias_plot_ax_x                                       = 1200
    pymbias_plot_ax_y                                       = 800
    
    // fgbio options
    f2b_umi_qual_tag                                        = 'QX'
    f2b_umi_tag                                             = 'RX'
    f2b_read_structure                                      = '3M2S+T 3M2S+T'

    correct_max_mismatch                                    = 1
    correct_min_distance                                    = 1
    correct_min_corrected                                   = '0.5'

    group_edits                                             = 0             // default number of allowable edits for fgbio's GROUPREADSBYUMI
    group_strategy                                          = 'paired'      // default strategy fgbio's GROUPREADSBYUMI
    group_min_map_q                                         = 0             // default is 0 in duplicate marking mode and 1 otherwise in fgbio's GROUPREADSBYUMI
    group_mark_duplicates                                   = true          // default is false for fgbio's GROUPREADSBYUMI
    group_include_secondary                                 = false         // default is true in duplicate marking mode and false otherwise for fgbio's GROUPREADSBYUMI
    group_allow_inter_contig                                = true          // default is true DEPRECATED: this option will be removed in future versions and inter-contig reads will be automatically processed.
    group_include_non_pf_reads                              = false
    group_include_supplementary                             = false         // default is true in duplicate marking mode and false otherwise for fgbio's GROUPREADSBYUMI

    call_min_baseq                                          = 10            // default minimum input base quality for fgbio's CALL*CONSENSUSREADS tools
    call_min_reads                                          = '1 1 0'       // default minimum input reads for fgbio's CALL*CONSENSUSREADS tools
    call_error_rate_pre_umi                                 = 40
    call_error_rate_post_umi                                = 35

    filter_min_reads                                        = 2
    filter_min_base_quality                                 = 1
    filter_max_base_error_rate                              = 0.1
    filter_max_read_error_rate                              = 0.025
    filter_max_no_call_fraction                             = 0.1

}

includeConfig 'conf/base.config'

profiles {

    crater {

        executor                                            = 'lsf'
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = true
        singularity.cacheDir                                = "/research/blancoj/.TOOLS/snglty/.singularity/cache"
        singularity.registry                                = 'quay.io'
        charliecloud.enabled                                = false
        singularity.autoMounts                              = true
        singularity.runOptions                              = "-B $TMPDIR"
        singularity.pullTimeout                             = '600m'        

        process {
            executor                                        = 'lsf'
            maxRetries                                      = 1
            errorStrategy                                   = 'retry'
            clusterOptions                                  = '-R "select[mem>16] rusage[mem=16]" -e .command.err'
        }
        
        executor {
            name                                            = 'lsf'
            queue                                           = 'default'
            queueSize                                       = 384
            pollInterval                                    = '10 sec'
            perJobMemLimit                                  = true
            submitRateLimit                                 = '10 sec'
        }

        params {
            // Cluster Tailored
            refs_dir                                        = '/research/blancoj/.HGREF'
            genome_base                                     = "${refs_dir}/${params.genome}"
            // General
            bwa                                             = "${params.genome_base}/bwamem2"
            fai                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.all.fa.fai"
            dict                                            = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.all.fa.dict"
            fasta                                           = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.all.fa"
            metdir                                          = "${params.genome_base}/methylation"
            metref                                          = "${params.genome_base}/methylation/Homo_sapiens.GRCh38.112.all.fa"
            metbed                                          = "${params.genome_base}/methylation/Twist_Methylome.bed"
            metfai                                          = "${params.genome_base}/methylation/Homo_sapiens.GRCh38.112.all.fa.fai"
            bwaref                                          = "${params.genome_base}/bwa2/Homo_sapiens.GRCh38.112.all.fa"
            bwafai                                          = "${params.genome_base}/bwa2/Homo_sapiens.GRCh38.112.all.fa.fai"
            bwadir                                          = "${params.genome_base}/bwa2"
            refflat                                         = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.chr.gtf.refflat"
            cytobands                                       = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.${params.seq_library}.cytobands.tsv"
            intervals                                       = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.seq_library}.trgt.sort.bed"
            kraken2db                                       = "${params.genome_base}/kraken2db"
            annotations                                     = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.${params.seq_library}.annotation.gtf"
            chromosomes                                     = "${params.genome_base}/${params.genome}_chromosomes_lengths.txt"
            exclude_bed                                     = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.all.exclude.bed"
            known_sites                                     = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.all.dbsnp.vcf.gz"
            blocklist_bed                                   = "${params.genome_base}/gridss/Homo_sapiens.${params.genome}.all.blocklist.bed"
            pon_directory                                   = "${params.genome_base}/gridss"
            known_sites_tbi                                 = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.all.dbsnp.vcf.gz.tbi"
            protein_domains                                 = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.${params.seq_library}.protein_domains.gff3"
            intervals_bed_gunzip                            = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.seq_library}.trgt.sort.bed.gz"
            normal_uncollapsed_bam                          = "${params.genome_base}/control_normal/NORMAL.bam"
            normal_uncollapsed_bai                          = "${params.genome_base}/control_normal/NORMAL.bai"
            intervals_bed_gunzip_index                      = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.seq_library}.trgt.sort.bed.gz.tbi"
        }
    }

    juno {

        executor                                            = 'lsf'
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = true
        singularity.cacheDir                                = "/juno/cmo/bergerlab/blancoj/.TOOLS/snglty/.singularity/cache"
        singularity.registry                                = 'quay.io'
        charliecloud.enabled                                = false
        singularity.autoMounts                              = true
        singularity.runOptions                              = "-B $TMPDIR"
        singularity.pullTimeout                             = '60m'        

        process {
            executor                                        = 'lsf'
            maxRetries                                      = 1
            errorStrategy                                   = 'retry'
            clusterOptions                                  = '-R "select[mem>16] rusage[mem=16]" -e .command.err'
        }
        
        executor {
            name                                            = 'lsf'
            queue                                           = 'default'
            queueSize                                       = 384
            pollInterval                                    = '10 sec'
            perJobMemLimit                                  = true
            submitRateLimit                                 = '10 sec'
        }

        params {
            // Cluster Tailored
            refs_dir                                        = "/juno/cmo/bergerlab/blancoj/.HGREF"
            genome_base                                     = "${refs_dir}/${params.genome}"
            ensembl_version                                 = 112
            // General
            metdct                                          = "${params.genome_base}/methylation/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.dict"
            metdir                                          = "${params.genome_base}/methylation"
            metref                                          = "${params.genome_base}/methylation/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa"
            metbed                                          = "${params.genome_base}/methylation/Twist_Methylome.bed"
            metfai                                          = "${params.genome_base}/methylation/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.fai"
            bwadct                                          = "${params.genome_base}/bwa2/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dict"
            bwaref                                          = "${params.genome_base}/bwa2/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa"
            bwafai                                          = "${params.genome_base}/bwa2/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.fai"
            bwadir                                          = "${params.genome_base}/bwa2"
            refflat                                         = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf.refflat"
            cytobands                                       = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.cytobands.tsv"
            intervals                                       = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed"
            kraken2db                                       = "${params.genome_base}/kraken2db"
            annotations                                     = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.annotation.gtf"
            chromosomes                                     = "${params.genome_base}/${params.genome}_chromosomes_lengths.txt"
            exclude_bed                                     = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.exclude.bed"
            known_sites                                     = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz"
            blocklist_bed                                   = "${params.genome_base}/gridss/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.blocklist.bed"
            interval_list                                   = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.intervals"
            hsmetrics_baits                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.interval_list"
            hsmetrics_trgts                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.interval_list"
            pon_directory                                   = "${params.genome_base}/gridss"
            known_sites_tbi                                 = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz.tbi"
            protein_domains                                 = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.protein_domains.gff3"
            intervals_bed_gunzip                            = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz"
            normal_uncollapsed_bam                          = "${params.genome_base}/control_normal/NORMAL.bam"
            normal_uncollapsed_bai                          = "${params.genome_base}/control_normal/NORMAL.bai"
            intervals_bed_gunzip_index                      = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz.tbi"
        }
    }

    iris {

        executor                                            = 'lsf'
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = true
        singularity.cacheDir                                = "/data1/bergerm1/blancoj/.TOOLS/snglty/.singularity/cache"
        singularity.registry                                = 'quay.io'
        charliecloud.enabled                                = false
        singularity.autoMounts                              = true
        singularity.runOptions                              = "-B $TMPDIR"
        singularity.pullTimeout                             = "3 hours"

        process {
            cache                                           = "lenient"
            queue                                           = 'test01'
            executor                                        = 'slurm'
            maxRetries                                      = 3
            afterScript                                     = "sleep 60"
            errorStrategy                                   = { task.exitStatus == 0 ? "retry" : "terminate" }
            clusterOptions                                  = '--mem=16G -e .command.err'
        }
        
        executor {
            name                                            = 'slurm'
            queue                                           = 'test01'
            partition                                       = 'test01'
            queueSize                                       = 2000
            pollInterval                                    = '10 sec'
            perJobMemLimit                                  = true
            exitReadTimeout                                 = "30 min"
            submitRateLimit                                 = '10/1sec'
            jobName                                         = {
                                                            task.name
                                                                .replace("[", "(")
                                                                .replace("]", ")")
                                                                .replace(" ", "_")
            }
        }

        params {
            // Cluster Tailored
            refs_dir                                        = '/data1/bergerm1/blancoj/.HGREF'
            genome_base                                     = "${refs_dir}/${params.genome}"
            ensembl_version                                 = 112
            // General
            metdct                                          = "${params.genome_base}/methylation/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.dict"
            metdir                                          = "${params.genome_base}/methylation"
            metref                                          = "${params.genome_base}/methylation/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa"
            metbed                                          = "${params.genome_base}/methylation/Twist_Methylome.bed"
            metfai                                          = "${params.genome_base}/methylation/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.fai"
            bwaref                                          = "${params.genome_base}/bwa2/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa"
            bwafai                                          = "${params.genome_base}/bwa2/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.fai"
            bwadir                                          = "${params.genome_base}/bwa2"
            refflat                                         = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf.refflat"
            cytobands                                       = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.cytobands.tsv"
            intervals                                       = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed"
            kraken2db                                       = "${params.genome_base}/kraken2db"
            annotations                                     = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.annotation.gtf"
            chromosomes                                     = "${params.genome_base}/${params.genome}_chromosomes_lengths.txt"
            exclude_bed                                     = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.exclude.bed"
            known_sites                                     = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz"
            blocklist_bed                                   = "${params.genome_base}/gridss/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.blocklist.bed"
            pon_directory                                   = "${params.genome_base}/gridss"
            known_sites_tbi                                 = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz.tbi"
            protein_domains                                 = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.protein_domains.gff3"
            intervals_bed_gunzip                            = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz"
            normal_uncollapsed_bam                          = "${params.genome_base}/control_normal/NORMAL.bam"
            normal_uncollapsed_bai                          = "${params.genome_base}/control_normal/NORMAL.bai"
            intervals_bed_gunzip_index                      = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz.tbi"
        }
    }
    debug {
        cleanup                                             = false
        dumpHashes                                          = true
        process.beforeScript                                = 'echo $HOSTNAME'
        nextflow.enable.configProcessNamesValidation        = true
    }
    conda {
        conda.enabled                                       = true
        conda.channels                                      = ['conda-forge', 'bioconda']
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = false
        charliecloud.enabled                                = false
    }
    mamba {
        conda.enabled                                       = true
        conda.useMamba                                      = true
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = false
        charliecloud.enabled                                = false
    }
    docker {
        conda.enabled                                       = false
        docker.enabled                                      = true
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        docker.runOptions                                   = '-u $(id -u):$(id -g)'
        singularity.enabled                                 = false
        charliecloud.enabled                                = false
    }
    arm {
        docker.runOptions                                   = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        executor                                            = 'lsf'
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = true
        singularity.registry                                = 'quay.io'
        charliecloud.enabled                                = false
        singularity.autoMounts                              = true
        singularity.runOptions                              = "-B $TMPDIR"
        singularity.pullTimeout                             = '60m'


        process {
            executor                                        = 'lsf'
            maxRetries                                      = 1
            errorStrategy                                   = 'retry'
            clusterOptions                                  = '-R "select[mem>16] rusage[mem=16]"'
            clusterOptions                                  = '-e .command.err'
        }
        
        executor {
            name                                            = 'lsf'
            queue                                           = 'default'
            queueSize                                       = 384
            pollInterval                                    = '10 sec'
            perJobMemLimit                                  = true
            submitRateLimit                                 = '10 sec'
        }
    }
    podman {
        podman.enabled                                      = true
        conda.enabled                                       = false
        docker.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = false
        charliecloud.enabled                                = false
    }
    shifter {
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = true
        apptainer.enabled                                   = false
        singularity.enabled                                 = false
        charliecloud.enabled                                = false
    }
    charliecloud {
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = false
        charliecloud.enabled                                = true
    }
    apptainer {
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = true
        singularity.enabled                                 = false
        apptainer.autoMounts                                = true
        charliecloud.enabled                                = false
    }
    wave {
        wave.freeze                                         = true
        wave.enabled                                        = true
        wave.strategy                                       = 'conda,container'
        apptainer.ociAutoPull                               = true
        singularity.ociAutoPull                             = true
    }
    gitpod {
        executor.name                                       = 'local'
        executor.cpus                                       = 4
        executor.memory                                     = 8.GB
        process {
            resourceLimits = [
                memory: 8.GB,
                cpus  : 4,
                time  : 1.h
            ]
        }
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"

env {
    R_PROFILE_USER                                          = "/.Rprofile"
    R_ENVIRON_USER                                          = "/.Renviron"
    JULIA_DEPOT_PATH                                        = "/usr/local/share/julia"
    PYTHONNOUSERSITE                                        = 1
}

process.shell = [
    "bash",
    "-C",                                                   // No clobber - prevent output redirection from overwriting files.
    "-e",                                                   // Exit if a tool returns a non-zero status/exit code
    "-u",                                                   // Treat unset variables and parameters as an error
    "-o",                                                   // Returns the status of the last command to exit..
    "pipefail"                                              // ..with a non-zero status or zero if all successfully execute
]

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}
prov {
    enabled = true
    formats {
        bco {
            file = "${params.outdir}/pipeline_info/manifest_${trace_timestamp}.bco.json"
        }
    }
}

manifest {
    name            = 'mstinn'
    contributors    = [
        [
            name: 'Juan Blanco Heredia',
            affiliation: 'MSKCC-CMO-Technological Innovation Lab',
            email: 'blancoj@mskcc.org',
            github: 'https://github.com/jblancoheredia',
            contribution: ['author'],
            orcid: '0000-0001-9526-7450'
        ],
    ]
    homePage        = 'https://github.com/jblancoheredia/MSTinn'
    description     = """MSTinn stands for Methylation Sequencing TAPS by Innovation Lab"""
    mainScript      = 'main.nf'
    defaultBranch   = 'main'
    nextflowVersion = '!>=24.04.2'
    version         = '1.0.0dev'
    doi             = ''
}

plugins {
    id 'nf-schema@2.3.0' // Validation of pipeline parameters and creation of an input channel from a sample sheet
    id 'nf-prov@1.2.2'   // Provenance reports for pipeline runs
}

validation {
    defaultIgnoreParams = ["genomes"]
    monochromeLogs = params.monochrome_logs
    help {
        enabled = true
        command = "nextflow run path/to/mstinn/main.nf -profile <crater/juno/iris> --input ../01_data/samples.csv --outdir ../03_outs/"
        fullParameter = "help_full"
        showHiddenParameter = "show_hidden"
    }
}

includeConfig 'conf/modules.config'
