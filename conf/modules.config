/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Available keys to override module options:
            ext.args   = Additional arguments appended to command in module.
            ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
            ext.args3  = Third  set of arguments appended to command in module (multi-tool modules).
            ext.prefix = File name prefix for output files.
-------------------------------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/stats_quality/fastqc/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '{*.html,*.json,*.zip}'
        ]
    }

    withName: CAT_FASTQ {
        publishDir = [
            path: { "${params.outdir}/preprocessing/cat_fastq/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> null }
        ]
    }

    withName: DOWNSAMPLINGS_COUNT {
        publishDir = [
            path: { "${params.outdir}/stats_quality/downsamplings/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DOWNSAMPLINGS_SEQTK {
        ext.args   = { params.downsampling_total_reads ? "final_reads=\"$params.downsampling_total_reads\"" : '' }
        publishDir = [
            path: { "${params.outdir}/preprocessing/downsamplings/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_MARKDUPLICATES' {
        ext.args = '-REMOVE_DUPLICATES true -VALIDATION_STRINGENCY LENIENT'
        publishDir = [
            path: { "${params.outdir}/dedupandrecal/markduplicates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BWA_METH' {
        publishDir = [
            path: { "${params.outdir}/methylfortaps/bwameth/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BWAMEM2' {
        publishDir = [
            path: { "${params.outdir}/methylfortaps/bwamem2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SENTIEON_BWAMEM' {
        publishDir = [
            path: { "${params.outdir}/methylfortaps/sentieon/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_FASTQTOBAM' {
        ext.args   = { "--sample ${meta.id} --library ${params.seq_library} --umi-tag  ${params.f2b_umi_tag} --read-structures ${params.f2b_read_structure} --umi-qual-tag ${params.f2b_umi_qual_tag} --sort true " }
        publishDir = [
            path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> null }
        ]
    }

    withName: 'ALIGN_BAM_RAW' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/align_raw_bam/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_CORRECTUMIS' {
        publishDir = [
            path: { "${params.outdir}/stats_quality/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> 
                if (filename.endsWith('.metrics.txt')) return filename
                else return null
            }
        ]
    }

    withName: SAMTOOLS_SORT_INDEX_RAW {
        publishDir = [
            path: { "${params.outdir}/preprocessing/bamraw/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> null }
        ]
    }

    withName: PICARD_COLLECTMULTIPLEMETRICS {
        publishDir = [
            path: { "${params.outdir}/stats_quality/picard/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FGBIO_ERRORRATEBYREADPOSITION_RAW {
        publishDir = [
            path: { "${params.outdir}/stats_quality/errorprofile/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SURVIVOR_SCAN_READS {
        publishDir = [
            path: { "${params.outdir}/stats_quality/errorprofile/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COLLECTHSMETRICS_RAW {
        publishDir = [
            path: { "${params.outdir}/stats_quality/hsmetrics/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMBLASTER' {
        ext.args   = { '-M --addMateTags' }
        ext.prefix = { "${meta.id}_unsorted_tagged" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/splitreads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SPADES {
        publishDir = [
            path: { "${params.outdir}/preprocessing/splitreads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FILTER_CONTIGS' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/splitreads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_GROUPREADSBYUMI' {
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                saveAs: { filename -> null }
            ],
            [
                path: { "${params.outdir}/stats_quality/fgbio/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.grouped-family-sizes.txt'
            ]
        ]
    }

    withName: 'FGBIO_COLLECTDUPLEXSEQMETRICS' {
        publishDir = [
            path: { "${params.outdir}/stats_quality/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_CALLDUPLEXCONSENSUSREADS' {
        ext.args   = { "-S Coordinate --error-rate-pre-umi \"${params.call_error_rate_pre_umi}\" --error-rate-post-umi \"${params.call_error_rate_post_umi}\" " }
        publishDir = [
            path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> null }
        ]
    }

    withName: 'FGBIO_SORTCONBAM' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> null }
        ]
    }

    withName:'FGBIO_FILTERCONSENSUSREADS' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ALIGN_BAM_CON' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/align_fin_bam/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> null }
        ]
    }

    withName: SAMTOOLS_SORT_INDEX_CON {
        publishDir = [
            path: { "${params.outdir}/preprocessing/bamfin/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'UMI_READ_COUNTS' {
        publishDir = [
            path: { "${params.outdir}/stats_quality/umi_stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'COLLECT_UMI_METRICS' {
        publishDir = [
            path: { "${params.outdir}/stats_quality/umi_stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PRESEQ_CCURVE' {
        publishDir = [
            path: { "${params.outdir}/stats_quality/preseq/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PRESEQ_LCEXTRAP' {
        publishDir = [
            path: { "${params.outdir}/stats_quality/preseq/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FGBIO_ERRORRATEBYREADPOSITION_CON {
        publishDir = [
            path: { "${params.outdir}/stats_quality/errorprofile/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COLLECTHSMETRICS_CON {
        publishDir = [
            path: { "${params.outdir}/stats_quality/hsmetrics/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COLLECTHSMETRICS_DUP {
        publishDir = [
            path: { "${params.outdir}/stats_quality/hsmetrics/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COLLECTHSMETRICS_SIM {
        publishDir = [
            path: { "${params.outdir}/stats_quality/hsmetrics/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_COLLATEFASTQ' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/collatefastq/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> null }
        ]
    }

    withName: FASTQ_CONSENSUS {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/stats_quality/fastqc/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PREP_BEDTOOLS_INTERSECT' {
        publishDir = [
            path: { "${params.outdir}/methylfortaps/bedtools/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/methylfortaps/samtools/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }        
            ]
    }

    withName: 'RASTAIR_FULL' {
        publishDir = [
            path: { "${params.outdir}/methylfortaps/rastair/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }   
        ]
    }

    withName: 'ASTAIR' {
        publishDir = [
            [
            path: { "${params.outdir}/methylfortaps/astair/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }

    withName: 'ASTAIR_BEDTOOLS_INTERSECT' {
        publishDir = [
            path: { "${params.outdir}/methylfortaps/astair/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_CLIPBAM' {
        publishDir = [
            path: { "${params.outdir}/variantdscvry/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> null }
        ]
    }

    withName: 'GATK4_HAPLOTYPECALLER' {
        publishDir = [
            path: { "${params.outdir}/variantdscvry/haplotypecaller/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/stats_quality/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
