/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                        CTI/MSTinn Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        MSTinn config file, tailored for use on MSK's Juno HPC environment.
------------------------------------------------------------------------------------------------------------------
*/

// Global default params
params {
    // Max resource requests
    max_memory = 128.GB
    max_cpus = 16
    max_time = 168.h
    
    // Defaults only, can be overridden
    memory = 6.GB
    cpus = 1
}

process {
    // Default process settings
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    // Resource management
    cpus   = { check_max(1      * task.attempt, 'cpus')   }
    memory = { check_max(6.GB   * task.attempt, 'memory') }
    time   = { check_max(4.h    * task.attempt, 'time')   }

    errorStrategy = { task.exitStatus in [(130..145),104,175] ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific labels for different resource requirements
    withLabel:process_single {
        cpus   = { 1                     }
        memory = { 6.GB * task.attempt   }
        time   = { 4.h  * task.attempt   }
    }
    withLabel:process_low {
        cpus   = { 2     * task.attempt  }
        memory = { 12.GB * task.attempt  }
        time   = { 4.h   * task.attempt  }
    }
    withLabel:process_medium {
        cpus   = { 6     * task.attempt  }
        memory = { 36.GB * task.attempt  }
        time   = { 8.h   * task.attempt  }
    }
    withLabel:process_high {
        cpus   = { 12    * task.attempt  }
        memory = { 72.GB * task.attempt  }
        time   = { 16.h  * task.attempt  }
    }
    withLabel:process_long {
        time   = { 20.h  * task.attempt  }
    }
    withLabel:process_high_memory {
        memory = { 200.GB * task.attempt }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withLabel: process_gpu {
        ext.use_gpu = { workflow.profile.contains('gpu') }
    }
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                 Custom Functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Function to ensure requested resources don't exceed max allowed
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
